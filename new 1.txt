def gcd(a, b):
    if b==0:
        return a
    return gcd(b, a%b)

def Pour(toJugCap, fromJugCap, d):
    fromJug = fromJugCap
    toJug = 0    
    step = 1
    path.append((fromJug, toJug))
    while((fromJug is not d) and (toJug is not d)):
        
        temp = min(fromJug, toJugCap-toJug)
        
        toJug = toJug + temp
        fromJug = fromJug - temp
        
        step = step + 1
        path.append((fromJug, toJug))
        if((fromJug == d) or (toJug == d)):
            break
            
        if fromJug == 0:
            fromJug = fromJugCap
            step = step + 1
            path.append((fromJug, toJug))
            
        if toJug == toJugCap:
            toJug = 0
            step = step + 1
            path.append((fromJug, toJug))
    
    return step

def minSteps(n, m, d):
    if m>n:
        temp = m
        m = n
        n = temp
        
    if(d%(gcd(n,m)) != 0):
        return -1
    
    sol1 = Pour(n,m,d)
    sol2 = Pour(m,n,d)
    return((min(sol1, sol2), sol1, sol2))

if __name__ == '__main__':
    path = []
    n = int(input("Size of Jug 1(in litres) : "))
    m = int(input("Size of Jug 2(in litres) : "))
    d = int(input("Goal Size(in litres) : "))
    s, s1, s2 = minSteps(n,m,d)
    print('Minimum number of steps required is',s)
    print("Solution 1 : ", end="")
    print(path[:s1])
    print("Solution 2 : ", end="")
    print(path[s1:])
	